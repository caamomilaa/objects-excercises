// El objeto con el que jugar√°s ser√° este:

const towerData = {
  levelOne: {
    vowels: [] // Vocales extra√≠das
  },
  levelTwo: {
    consonants: [] // Consonantes extra√≠das
  },
  levelThree: {
    words: [] // Palabras extra√≠das en orden normal
  },
  levelFour: {
    wordLengths: [] // Longitud de cada palabra
  },
  levelFive: {
    uppercasedWords: [], // Palabras en may√∫sculas
    lowercasedWords: [] // Palabras en min√∫sculas
  },
  levelSix: {
    secretMessage: '' // Mensaje codificado usando reglas especiales
  },
  levelSeven: {
    totalLength: 0 // Suma total de la longitud de todas las palabras
  },
  levelEight: {
    reversedWords: [] // Palabras invertidas de la frase original
  },
  levelNine: {
    randomCode: '' // C√≥digo aleatorio generado en base a toda la informaci√≥n
  },
  levelTen: {
    finalMessage: '' // C√≥digo final calculado usando todos los niveles
  }
};
console.log(towerData);

// üéØ Objetivo General:
// Procesar una frase introducida por el usuario y transformarla siguiendo reglas espec√≠ficas en cada nivel.

// üè∞ Niveles y Reglas:

// 1Ô∏è‚É£ Nivel Uno: La C√°mara de las Voces Perdidas
// Extrae todas las vocales de la frase introducida y almac√©nalas en towerData.levelOne.vowels.
vowels = 'aeiouAEIOU√°√©√≠√≥√∫√Å√â√ç√ì√ö';

const getVowels = sentence => {
  const allVowels = [];
  for (letter of sentence) {
    if (vowels.includes(letter)) {
      allVowels.push(letter);
    }
  }
  towerData.levelOne.vowels = allVowels;
};

// 2Ô∏è‚É£ Nivel Dos: La Biblioteca de Consonantes Prohibidas
// Extrae todas las consonantes de la frase y almac√©nalas en towerData.levelTwo.consonants.

const getConsonants = sentence => {
  const allConsonants = [];
  for (letter of sentence) {
    if (!vowels.includes(letter) && letter !== ' ') {
      allConsonants.push(letter);
    }
  }
  towerData.levelTwo.consonants = allConsonants;
};

// 3Ô∏è‚É£ Nivel Tres: El Sal√≥n de las Palabras Fragmentadas
// Divide la frase en palabras y gu√°rdalas en towerData.levelThree.words.

const splitWordsOfSentence = sentence => {
  const splitSentence = sentence.split(' ');
  towerData.levelThree.words = splitSentence;
  return splitSentence;
};

// 4Ô∏è‚É£ Nivel Cuatro: La Sala de la Longitud Eterna
// Calcula la longitud de cada palabra de towerData.levelThree.words y gu√°rdalas en towerData.levelFour.wordLengths.
const calculateWordsLength = splitWords => {
  const allWordsLength = [];
  for (const word of splitWords) {
    allWordsLength.push(word.length);
  }
  towerData.levelFour.wordLengths = allWordsLength;
};

// 5Ô∏è‚É£ Nivel Cinco: El Espejo Dual
// Convierte cada palabra de towerData.levelThree.words a may√∫sculas y gu√°rdalas en towerData.levelFive.uppercasedWords.

const fillTower = sentence => {
  const levelOne = getVowels(sentence);
  const levelTwo = getConsonants(sentence);
  const levelThree = splitWordsOfSentence(sentence);
  const levelFour = calculateWordsLength(levelThree);
};
fillTower('Me cago en to');

// Convierte cada palabra de towerData.levelThree.words a min√∫sculas y gu√°rdalas en towerData.levelFive.lowercasedWords.

// 6Ô∏è‚É£ Nivel Seis: El Encriptador de Secretos
// Crea un mensaje secreto aplicando las siguientes reglas:

// Vocales se reemplazan por n√∫meros:

// a ‚Üí 1, e ‚Üí 2, i ‚Üí 3, o ‚Üí 4, u ‚Üí 5

// Investiga la funci√≥n replaceAll y las expresiones regulares

// Consonantes se reemplazan por la consonante anterior en el alfabeto (excepto b -> z).

// Espacios se reemplazan por una letra aleatoria del alfabeto.

// Guarda el resultado en towerData.levelSix.secretMessage.

// 7Ô∏è‚É£ Nivel Siete: El Or√°culo de la Suma
// Calcula la suma total de las longitudes de todas las palabras obtenidas en el nivel 4 y almac√©nalo en towerData.levelSeven.totalLength.

// 8Ô∏è‚É£ Nivel Ocho: El Reflejo Invertido
// Invierte cada palabra del array towerData.levelThree.words y gu√°rdalas en towerData.levelEight.reversedWords.

// 9Ô∏è‚É£ Nivel Nueve: La C√°mara del C√≥dex Aleatorio
// Genera un c√≥digo √∫nico combinando:

// La primera letra de cada palabra invertida (nivel 8).

// Los suma de los n√∫meros generados en towerData.levelSeven.totalLength dividido entre 2.

// Un n√∫mero aleatorio entre 1000 y 9999.

// Almacena el c√≥digo generado en towerData.levelNine.randomCode.

// üîü Nivel Diez: La Prueba Suprema - El Guardi√°n del C√≥digo Final
// Usa TODOS los valores obtenidos en los niveles anteriores para generar un c√≥digo maestro √∫nico.

// La f√≥rmula del c√≥digo maestro ser√° la siguiente:

// finalMessage = (Total de vocales _ Longitud total obtenida en el nivel 7) + (Cantidad de consonantes _ N√∫mero aleatorio generado en Nivel 9) - (N√∫mero de palabras * N√∫mero de caracteres en el mensaje secreto)
